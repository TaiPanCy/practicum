@startuml
title WarmHouse Container Diagram

top to bottom direction

!includeurl https://raw.githubusercontent.com/RicardoNiepel/C4-PlantUML/master/C4_Component.puml

Person(user, "Клиент компании", "Пользователь")
Person(admin, "Администратор", "Администратор системы")
System(WarmHouseCore, "WarmHouse ядро системы", "Управляет, настраивает и мониторит модули. Взаимодействует с БД. Ведет мониторинг системы")

Container_Boundary(WarmHouseCore, "WarmHouse ядро системы") {
  Container(WebApp, "Приложение клиента", "")
  Container(AdminApp, "Приложение администратора системы", "")
  Container(API, "API SaaS приложения", "")
  Container(AuthUserService, "Сервис AAА", "")
  Container(AuthLocService, "Сервис управления локациями", "")
  Container(ModuleRegService, "Сервис регистрации и удаления модулей по типу устройства (температура, свет, ворота, камера, ...)", "")
  Container(ModuleLocRegService, "Сервис добавления и удаления модулей в локации", "")
  Container(ModuleService, "Сервис управления модулями", "")
  Container(MonitoringService, "Сервис отображения показателей и состояния модулей", "")
  Container(DataFetchService, "Сервис сбора данных с модулей", "")
  Container(PingModuleService, "Сервис мониторинга доступности модулей", "")
  Container(LogService, "Сервис логирования", "")
  ContainerQueue(queue, "Брокер сообщений")
  ContainerDb(db, "База данных", "PostgreSQL", "Хранит данные приложения")
}


System_Ext(apiModules, "API модулей")

'клиенты системы
Rel(user, WebApp, "Смотрит через приложение показатели модулей. Настраивает сценарии. Подключает модули в систему. Привязывает модули к локации")
Rel(admin, AdminApp,"Администрирует систему")
Rel(WebApp, API,"")
Rel(AdminApp, API,"")

'сервисы системы

Rel(API, AuthUserService,"Авторизует, аутентифицирует и учитывает пользователей")
Rel(AuthUserService, queue, "")
Rel(AuthUserService,db,"")

Rel(API, AuthLocService,"Управляет локациями пользователей")
Rel(AuthLocService, queue, "")
Rel(AuthLocService,db,"")

Rel(API, ModuleRegService,"Управляет регистрацией модулей по типу устройства (температура, свет, ворота, камера, ...)")
Rel(ModuleRegService, queue, "")
Rel(ModuleRegService,db,"")

Rel(API, ModuleLocRegService,"Управляет добавлением и удалением модулей в локации")
Rel(ModuleLocRegService, queue, "")
Rel(ModuleLocRegService,db,"")

Rel(API, ModuleService,"Управляет параметрами модулей")
Rel(ModuleService, queue, "")
Rel(ModuleService,db,"")

Rel(API, MonitoringService,"Транслирует показатели и состояния модулей")
Rel(MonitoringService, queue, "")
Rel(MonitoringService,db,"")

Rel(DataFetchService, queue, "Собирает данные с модулей")
Rel(queue, LogService,"")
Rel(LogService, db,  "сохраняет данные из очередей в базу")

Rel(PingModuleService, queue, "Проверяет доступность модулей")
Rel(queue, PingModuleService,"")
Rel(PingModuleService, db,  "сохраняет данные из очередей в базу")

Rel(ModuleService,apiModules,"Передает параметры управления на модули")
Rel(ModuleRegService,apiModules,"Регистрирует модули в системе")
Rel(MonitoringService,apiModules,"Отображает данные с модулей")
Rel(DataFetchService,apiModules,"Собирает данные с модулей")
Rel(PingModuleService,apiModules,"пингует модули")

@enduml